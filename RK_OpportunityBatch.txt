global class RK_OpportunityBatch implements Database.Batchable<sObject>{
    global String satgeName;
    global RK_OpportunityBatch(String stageName){
        this.satgeName = stageName;
    }
    global Database.QueryLocator start(Database.BatchableContext bc) {
         String oppQuery = 'SELECT Id, Name, StageName,IsClosed FROM Opportunity WHERE IsClosed = false'; 
         return Database.getQueryLocator(oppQuery);
    }
    
    global void execute(Database.BatchableContext bc, List<Opportunity> opportunityList){
        if(opportunityList.size() > 0){
            List<Opportunity> updateOpportunityList = new List<Opportunity>();
            Map<Id,Opportunity> oldOpportunity = new Map<Id,Opportunity>();
            Map<Id,Opportunity> newOpportunity = new Map<Id,Opportunity>();
            for(Opportunity opportunities : opportunityList) { 
                Opportunity opportunity = new Opportunity();
                opportunity.Id = opportunities.Id;
                opportunity.Name = opportunities.Name;
                opportunity.StageName = satgeName;
                updateOpportunityList.add(opportunity);
                newOpportunity.put(opportunity.Id,opportunity);
                oldOpportunity.put(opportunity.Id,opportunities);
            }
            
            AsyncApexJob asynJobProcess = [SELECT Id, Status, JobItemsProcessed, TotalJobItems, NumberOfErrors, ExtendedStatus, CompletedDate, CreatedDate FROM AsyncApexJob WHERE Id = :bc.getJobId()];
            System.debug('asynJobProcess:- '+asynJobProcess);
            
            if(updateOpportunityList.size() > 0){
                try{
                    Database.SaveResult[] saveList = Database.update(updateOpportunityList, false);
                    List<Batch_Log__c> batchLogList = new List<Batch_Log__c>();
                    for(Database.SaveResult saveResult : saveList){
                        if(saveResult.isSuccess()) {
                            Id getOppId = saveResult.getId();
                            Batch_Log__c batchLog = new Batch_Log__c();
                            batchLog.Name = newOpportunity.get(getOppId).Name+'_'+'batchLog';
                            batchLog.Batch_Run_Time__c = asynJobProcess.CreatedDate;
                            batchLog.Opportunity__c = getOppId;
                            batchLog.Opportunity_Name__c = newOpportunity.get(getOppId).Name;
                            batchLog.New_StageName__c = newOpportunity.get(getOppId).StageName;
                            batchLog.Previous_StageName__c = oldOpportunity.get(getOppId).StageName;
                            batchLog.Status__c='Success';
                            batchLogList.add(batchLog);
                        }else{
                            for(Database.Error error : saveResult.getErrors()) {
                                System.debug(error.getStatusCode() + '-' + error.getMessage());
                                String errorMessage = error.getStatusCode() + '-' + error.getMessage(); 
                                Id getOppId = saveResult.getId();
                                Batch_Log__c batchLog = new Batch_Log__c();
                                batchLog.Name = newOpportunity.get(getOppId).Name+'_'+'batchLog';
                                batchLog.Batch_Run_Time__c = asynJobProcess.CreatedDate;
                                batchLog.Opportunity__c = getOppId;
                                batchLog.Opportunity_Name__c = newOpportunity.get(getOppId).Name;
                                batchLog.New_StageName__c = newOpportunity.get(getOppId).StageName;
                                batchLog.Previous_StageName__c = oldOpportunity.get(getOppId).StageName;
                                batchLog.Status__c='Failed';
                                batchLog.Reason__c = errorMessage;
                                batchLogList.add(batchLog);
                            }
                        }
                        try{
                            if(batchLogList.size() > 0){
                                Database.SaveResult[] batchLogRecordList = Database.insert(batchLogList, false);
                                system.debug('batchLogRecordList:-- '+batchLogRecordList);
                            }
                        }catch(System.DmlException e){
                            system.debug('Insertion failed::- '+e.getMessage());
                        }
                    }
                }catch(System.DmlException e){
                    system.debug('Updation failed::- '+e.getMessage());
                }
            }
            
        }
        
    }
    
    global void finish(Database.BatchableContext bc){
        AsyncApexJob asynJobProcess = [SELECT Id, Status, JobItemsProcessed, TotalJobItems, NumberOfErrors, ExtendedStatus, CompletedDate, CreatedDate FROM AsyncApexJob WHERE Id = :bc.getJobId()];
        System.debug('asynJobProcess:- '+asynJobProcess);
    }
}